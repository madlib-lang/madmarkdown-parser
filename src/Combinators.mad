import type { Parser } from "Parse"

import { apL } from "Applicative"
import { identity } from "Function"
import { mapL } from "Functor"
import { lookAhead, someTill } from "Parse"



between :: Parser a -> Parser b -> Parser c -> Parser b
export between = (start, mid, end) => pipe(
  mapL(identity),
  ap($, mid),
  apL($, end),
)(start)

someUntil :: Parser a -> Parser b -> Parser (List a)
export someUntil = (prefix, suffix) => someTill(prefix, lookAhead(suffix))
