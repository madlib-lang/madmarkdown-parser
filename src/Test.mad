import { Left, Right } from "Either"
import File from "File"
import { always } from "Function"
import IO from "IO"
import Parse from "Parse"
import Test from "Test"
import Wish from "Wish"



TestError = Test.Error

testParser :: (Show a, Eq a) => Parse.Parser a -> String -> a -> Wish Test.AssertionError {}
export testParser = (parser, toParse, expected) => pipe(
  Parse.runParser(parser),
  where {
    Left(Parse.Error(Parse.Loc(a, b, c))) =>
      Wish.bad(TestError(`Error during parsing ${show(a)} ${show(b)} ${show(c)}`))

    Right(res) =>
      Test.assertEquals(res, expected)
  },
)(toParse)

parseTest :: (Show a, Eq a) => String
  -> Parse.Parser a
  -> String
  -> a
  -> Wish Test.TestResult Test.TestResult
export parseTest = (testName, parser, toParse, expected) => Test.test(
  testName,
  () => testParser(parser, toParse, expected),
)

parseFile :: (Show a, Eq a) => String
  -> String
  -> Parse.Parser a
  -> a
  -> Wish Test.TestResult Test.TestResult
export parseFile = (filePath, testName, parser, expected) => Test.test(
  testName,
  () => pipe(
    IO.pTrace("reading file..."),
    File.read,
    IO.pTrace("read file!"),
    Wish.mapRej(always(TestError("File reading error"))),
    chain((FIXTURE) => testParser(parser, FIXTURE, expected)),
  )(filePath),
)
