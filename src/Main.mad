import { dropWhile, mapMaybe } from "List"
import { always, equals, identity } from "Function"
import { Just, Nothing } from "Maybe"
import type { Either } from "Either"
import { mapLeft } from "Either"
import { mapL } from "Functor"
import { apL } from "Applicative"
import P from "Parse"
import String from "String"


export type ContentPart
  = Text(String)
  | Bold(String)
  | Italic(String)
  | InlineCode(String)
  | Link(String, String)
  | Image(String, String)
  | LineReturn

export alias Content = List ContentPart

export type Block
  = H1(Content)
  | H2(Content)
  | H3(Content)
  | H4(Content)
  | H5(Content)
  | H6(Content)
  | Paragraph(Content)
  | Blockquote(Content)
  | Code(String, String)
  | UnorderedList(List Content)

export alias Markdown = List Block


between :: P.Parser a -> P.Parser b -> P.Parser c -> P.Parser b
between = (start, mid, end) => pipe(
  mapL(identity),
  ap($, mid),
  apL($, end)
)(start)


// contentCharacter :: P.Parser Char
// contentCharacter = P.choice([
//   P.letter,
//   P.digit,
//   P.char('!'),
//   P.char('?'),
//   P.char(' ')
// ])

// https://stackoverflow.com/questions/1547899/which-characters-make-a-url-invalid
linkCharacter :: P.Parser Char
linkCharacter = P.choice([
  P.letter,
  P.digit,
  P.char('!'),
  P.char('#'),
  P.char('$'),
  P.char('%'),
  P.char('&'),
  P.char('\''),
  P.char('*'),
  P.char('+'),
  P.char(','),
  P.char('-'),
  P.char('.'),
  P.char('/'),
  P.char(':'),
  P.char(';'),
  P.char('='),
  P.char('?'),
  P.char('@'),
  P.char('_'),
  P.char('~')
])



bold :: P.Parser ContentPart
bold = pipe(
  mapL(Bold),
  ap($, pipe(
    (a) => P.someTill(a, P.lookAhead(P.string("**"))),
    map(String.fromList)
  )(P.notChar('\n'))),
  apL($, P.string("**"))
)(P.string("**"))


italic :: P.Parser ContentPart
italic = do {
  _ <- P.char('*')
  firstChar <- P.notChar(' ')
  nextChars <- P.many(P.notOneOf(['*', '\n']))
  _ <- P.char('*')

  return pipe(
    String.fromList,
    String.pushChar(firstChar),
    Italic,
    of
  )([firstChar, ...nextChars])
}

inlineCode :: P.Parser ContentPart
inlineCode = pipe(
  mapL(InlineCode),
  ap($, pipe(P.many, map(String.fromList))(P.notOneOf(['`', '\n']))),
  apL($, P.char('`'))
)(P.char('`'))

link :: P.Parser ContentPart
link = pipe(
  map(Link),
  ap($, between(
    P.char('('),
    pipe(P.many, map(String.fromList))(linkCharacter),
    P.char(')')
  ))
)(between(
  P.char('['),
  pipe(P.many, map(String.fromList))(P.notOneOf([']', '\n'])),
  P.char(']')
))

image :: P.Parser ContentPart
image = pipe(
  mapL(Image),
  ap($, between(
    P.char('['),
    pipe(P.many, map(String.fromList))(P.notOneOf([']', '\n'])),
    P.char(']')
  )),
  ap($, between(
    P.char('('),
    pipe(P.many, map(String.fromList))(linkCharacter),
    P.char(')')
  ))
)(P.char('!'))

textTerminals :: P.Parser String
textTerminals = P.choice([
  map(always(""), bold),
  map(always(""), italic),
  map(always(""), inlineCode),
  map(always(""), image),
  map(always(""), link),
  map(always(""), P.eof),
  P.string("\n")
])

text :: P.Parser ContentPart
text = pipe(
  P.someTill($, P.lookAhead(textTerminals)),
  map(pipe(String.fromList, Text))
)(P.notChar('\n'))

lineReturn :: P.Parser ContentPart
lineReturn = map(always(LineReturn), P.char('\n'))

content :: P.Parser Content
content = pipe(
  P.choice,
  P.many
)([bold, italic, inlineCode, image, link, text])


lineReturnExceptBefore :: P.Parser a -> P.Parser ContentPart
lineReturnExceptBefore = (before) => pipe(
  mapL(identity),
  ap($, alt(map(always(Just({})), before), pure(Nothing))),
  P.lookAhead,
  chain(where {
    Just(_) =>
      aempty

    Nothing =>
      lineReturn
  })
)(lineReturn)

contentWithLineReturn :: P.Parser a -> P.Parser Content
contentWithLineReturn = (delimiter) => pipe(
  P.choice,
  P.some,
  map(dropWhile(equals(LineReturn)))
)([bold, italic, inlineCode, image, link, text, lineReturnExceptBefore(delimiter)])

heading :: (Content -> Block) -> String -> P.Parser Block
heading = (constructor) => pipe(
  P.symbol,
  mapL(constructor),
  ap($, content),
  apL($, singleReturnTerminal)
)

singleReturnTerminal :: P.Parser String
singleReturnTerminal = alt(P.string("\n"), map(always(""), P.eof))

doubleReturnTerminal :: P.Parser String
doubleReturnTerminal = P.choice([
  P.string("\n\n"),
  map(always(""), P.eof),
  pipe(ap(pure((_, _) => "")), ap($, P.eof))(P.char('\n'))
])

code :: P.Parser Block
code = pipe(
  mapL((lang, c) => Code(lang, c)),
  ap($, alt(map(String.fromList, P.letters), pure(""))),
  apL($, P.char('\n')),
  ap($, map(String.fromList, P.manyTill(P.anyChar, P.lookAhead(P.string("\n```"))))),
  apL($, P.choice([
    map((_) => "", apL(P.string("\n```"), P.eof)),
    P.string("\n```\n")
  ]))
)(P.string("```"))

blockquote :: P.Parser Block
blockquote = pipe(
  mapL(Blockquote),
  ap($, contentWithLineReturn(P.choice([P.string("\n"), P.string("```"), P.string(">")]))),
  apL($, P.choice([
    doubleReturnTerminal,
    P.lookAhead(P.string("\n```")),
    P.lookAhead(P.string("\n>"))
  ]))
)(alt(P.symbol(">"), P.string(">")))



listItemStart = map(always(""), apL(P.many(P.char(' ')), apL(P.oneOf(['*', '-', '+']), P.some(P.char(' ')))))

unorderedListItem :: P.Parser Content
unorderedListItem = pipe(
  chain(always(apL(content, singleReturnTerminal)))
)(listItemStart)

unorderedList :: P.Parser Block
unorderedList = pipe(
  P.some,
  map(UnorderedList)
)(unorderedListItem)



paragraph :: P.Parser Block
paragraph = pipe(
  map(Paragraph),
  apL($, P.choice([
    doubleReturnTerminal,
    P.lookAhead(P.string("\n```")),
    P.lookAhead(P.string("\n>")),
    P.lookAhead(apL(P.string("\n"), listItemStart))
  ]))
)(contentWithLineReturn(P.choice([listItemStart, P.string("\n"), P.string("```"), P.string(">")])))





block :: P.Parser Block
block = P.choice([
  heading(H6, "######"),
  heading(H5, "#####"),
  heading(H4, "####"),
  heading(H3, "###"),
  heading(H2, "##"),
  heading(H1, "#"),
  unorderedList,
  blockquote,
  code,
  paragraph
])


markdownParser :: P.Parser Markdown
markdownParser = pipe(
  P.choice,
  P.many,
  map(mapMaybe((x) => x)),
)([map(always(Nothing), P.spaces), map(Just, block)])


parseMarkdown :: String -> Either String Markdown
export parseMarkdown = pipe(
  P.runParser(markdownParser),
  mapLeft(always("Malformed markdown input"))
)
