import { dropWhile, filter, reduce } from "List"
import { always, equals, identity } from "Function"
import { Just, Nothing } from "Maybe"
import { mapLeft, Either } from "Either"
import { mapL } from "Functor"
import { apL } from "Applicative"
import P from "MadParser"


export type ContentPart
  = Text String
  | Bold String
  | Italic String
  | InlineCode String
  | Link String String
  | Image String String
  | LineReturn

export alias Content = List ContentPart

export type Block
  = H1 Content
  | H2 Content
  | H3 Content
  | H4 Content
  | H5 Content
  | H6 Content
  | Paragraph Content
  | Blockquote Content
  | Code String String
  | UnorderedList (List Content)

export alias Markdown = List Block


between :: P.Parser a -> P.Parser b -> P.Parser c -> P.Parser b
between = (start, mid, end) => pipe(
  mapL(identity),
  ap($, mid),
  apL($, end)
)(start)

contentCharacter :: P.Parser String
contentCharacter = P.choice([
  P.letter,
  P.digit,
  P.char("!"),
  P.char("?"),
  P.char(" ")
])

linkCharacter :: P.Parser String
linkCharacter = P.choice([
  P.letter,
  P.digit,
  P.char("/"),
  P.char(":"),
  P.char("?"),
  P.char("."),
  P.char("-"),
  P.char("_"),
  P.char("="),
  P.char("#")
])



bold :: P.Parser ContentPart
bold = pipe(
  mapL(Bold),
  ap($, pipe(
    P.someTill($, P.lookAhead(P.string("**"))),
    map(reduce(mappend, ""))
  )(P.notChar("\n"))),
  apL($, P.string("**"))
)(P.string("**"))

italic :: P.Parser ContentPart
italic = pipe(
  mapL((a, b) => Italic(a ++ b)),
  ap($, P.notChar(" ")),
  ap($, pipe(P.many, map(reduce(mappend, "")))(P.notOneOf(["*", "\n"]))),
  apL($, P.char("*"))
)(P.char("*"))

inlineCode :: P.Parser ContentPart
inlineCode = pipe(
  mapL(InlineCode),
  ap($, pipe(P.many, map(reduce(mappend, "")))(P.notOneOf(["`", "\n"]))),
  apL($, P.char("`"))
)(P.char("`"))

link :: P.Parser ContentPart
link = pipe(
  map(Link),
  ap($, between(
    P.char("("),
    pipe(P.many, map(reduce(mappend, "")))(P.notOneOf([")", "\n"])),
    P.char(")")
  ))
)(between(
  P.char("["),
  pipe(P.many, map(reduce(mappend, "")))(linkCharacter),
  P.char("]")
))

image :: P.Parser ContentPart
image = pipe(
  mapL(Image),
  ap($, between(
    P.char("["),
    pipe(P.many, map(reduce(mappend, "")))(P.notOneOf(["]", "\n"])),
    P.char("]")
  )),
  ap($, between(
    P.char("("),
    pipe(P.many, map(reduce(mappend, "")))(linkCharacter),
    P.char(")")
  ))
)(P.char("!"))

textTerminals :: P.Parser String
textTerminals = P.choice([
  map(always(""), bold),
  map(always(""), italic),
  map(always(""), inlineCode),
  map(always(""), image),
  map(always(""), link),
  P.char("\n")
])

text :: P.Parser ContentPart
text = pipe(
  P.someTill($, P.lookAhead(textTerminals)),
  // (cp) => alt(
  //   P.someTill(cp, P.lookAhead(textTerminals)),
  //   P.some(cp)
  // ),
  map(pipe(reduce(mappend, ""), Text))
// )(contentCharacter)
)(P.notChar("\n"))

lineReturn :: P.Parser ContentPart
lineReturn = map(always(LineReturn), P.char("\n"))

content :: P.Parser Content
content = pipe(
  P.choice,
  P.many
)([bold, italic, inlineCode, image, link, text])


lineReturnExceptBefore :: P.Parser a -> P.Parser ContentPart
lineReturnExceptBefore = (before) => pipe(
  mapL(identity),
  ap($, alt(map(always(Just(())), before), pure(Nothing))),
  P.lookAhead,
  chain(where
    is Just _ : empty
    is Nothing: lineReturn
  )
)(lineReturn)

contentWithLineReturn :: P.Parser a -> P.Parser Content
contentWithLineReturn = (delimiter) => pipe(
  P.choice,
  P.some,
  map(dropWhile(equals(LineReturn)))
)([bold, italic, inlineCode, image, link, text, lineReturnExceptBefore(delimiter)])

heading :: (Content -> Block) -> String -> P.Parser Block
heading = (constructor) => pipe(
  P.symbol,
  mapL(constructor),
  ap($, content),
  apL($, singleReturnTerminal)
)

singleReturnTerminal :: P.Parser String
singleReturnTerminal = alt(P.char("\n"), map(always(""), P.eof))

doubleReturnTerminal :: P.Parser String
doubleReturnTerminal = P.choice([
  P.string("\n\n"),
  map(always(""), P.eof),
  pipe(ap(pure((_, __) => "")), ap($, P.eof))(P.char("\n"))
])

code :: P.Parser Block
code = pipe(
  mapL((lang, c) => Code(lang, c)),
  ap($, alt(P.letters, pure(""))),
  apL($, P.char("\n")),
  ap($, map(reduce(mappend, ""), P.manyTill(P.anyChar, P.lookAhead(P.string("\n```"))))),
  apL($, P.choice([
    map((_) => "", apL(P.string("\n```"), P.eof)),
    P.string("\n```\n")
  ]))
)(P.string("```"))

blockquote :: P.Parser Block
blockquote = pipe(
  mapL(Blockquote),
  ap($, contentWithLineReturn(P.choice([P.char("\n"), P.string("```"), P.char(">")]))),
  apL($, P.choice([
    doubleReturnTerminal,
    P.lookAhead(P.string("\n```")),
    P.lookAhead(P.string("\n>"))
  ]))
)(alt(P.symbol(">"), P.string(">")))

paragraph :: P.Parser Block
paragraph = pipe(
  map(Paragraph),
  apL($, P.choice([doubleReturnTerminal, P.lookAhead(P.string("\n```")), P.lookAhead(P.string("\n>"))]))
)(contentWithLineReturn(P.choice([P.char("\n"), P.string("```"), P.char(">")])))



unorderedListItem :: P.Parser Content
unorderedListItem = pipe(
  chain(always(apL(content, singleReturnTerminal)))
)(apL(P.oneOf(["*", "-", "+"]), P.some(P.char(" "))))

unorderedList :: P.Parser Block
unorderedList = pipe(
  P.some,
  map(UnorderedList)
)(unorderedListItem)

block :: P.Parser Block
block = P.choice([
  heading(H6, "######"),
  heading(H5, "#####"),
  heading(H4, "####"),
  heading(H3, "###"),
  heading(H2, "##"),
  heading(H1, "#"),
  unorderedList,
  blockquote,
  code,
  paragraph
])


markdownParser :: P.Parser Markdown
markdownParser = pipe(
  P.choice,
  P.many,
  map(pipe(
    filter(where
      is Just x : true
      is Nothing: false
    ),
    map(where is Just x: x)
  ))
)([map(always(Nothing), P.spaces), map(Just, block)])


parseMarkdown :: String -> Either String Markdown
export parseMarkdown = pipe(
  P.runParser(markdownParser),
  mapLeft(always("Malformed markdown input"))
)
