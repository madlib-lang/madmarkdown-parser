import type { Either } from "Either"

import { apL } from "Applicative"
import { mapLeft } from "Either"
import { always, equals, identity } from "Function"
import { mapL } from "Functor"
import { dropWhile, mapMaybe } from "List"
import { Just, Nothing } from "Maybe"
import P from "Parse"
import String from "String"



export type ContentPart
  = Text(String)
  | Bold(String)
  | Italic(String)
  | InlineCode(String)
  | Link(String, String)
  | InternalLink(String, String)
  | Image(String, String)
  | LineReturn

export alias Content = List ContentPart

export type Block
  = H1(Content)
  | H2(Content)
  | H3(Content)
  | H4(Content)
  | H5(Content)
  | H6(Content)
  | Paragraph(Content)
  | Blockquote(Content)
  | Code(String, String)
  | UnorderedList(List Content)

export alias Markdown = List Block

between :: P.Parser a -> P.Parser b -> P.Parser c -> P.Parser b
export between = (start, mid, end) => pipe(
  mapL(identity),
  ap($, mid),
  apL($, end),
)(start)

// https://stackoverflow.com/questions/1547899/which-characters-make-a-url-invalid
linkCharacter :: P.Parser Char
export linkCharacter = P.choice([
  P.letter,
  P.digit,
  P.char('!'),
  P.char('#'),
  P.char('$'),
  P.char('%'),
  P.char('&'),
  P.char('\''),
  P.char('*'),
  P.char('+'),
  P.char(','),
  P.char('-'),
  P.char('.'),
  P.char('/'),
  P.char(':'),
  P.char(';'),
  P.char('='),
  P.char('?'),
  P.char('@'),
  P.char('_'),
  P.char('~'),
])

// TODO: support either __bold__ or **bold**
bold :: P.Parser ContentPart
export bold = pipe(
  mapL(Bold),
  ap(
    $,
    pipe(
      (a) => P.someTill(a, P.lookAhead(P.string("**"))),
      map(String.fromList),
    )(P.notChar('\n')),
  ),
  apL($, P.string("**")),
)(P.string("**"))

// TODO: support either _italic_ or *italic*
italic :: P.Parser ContentPart
export italic = do {
  _ <- P.char('*')
  firstChar <- P.notChar(' ')
  nextChars <- P.many(P.notOneOf(['*', '\n']))
  _ <- P.char('*')

  return pipe(
    String.fromList,
    Italic,
    of,
  )([firstChar, ...nextChars])
}

inlineCode :: P.Parser ContentPart
export inlineCode = pipe(
  mapL(InlineCode),
  ap(
    $,
    pipe(
      P.many,
      map(String.fromList),
    )(P.notOneOf(['`', '\n'])),
  ),
  apL($, P.char('`')),
)(P.char('`'))

link :: P.Parser ContentPart
export link = pipe(
  map(Link),
  ap(
    $,
    between(
      P.char('('),
      pipe(
        P.many,
        map(String.fromList),
      )(linkCharacter),
      P.char(')'),
    ),
  ),
)(
  between(
    P.char('['),
    pipe(
      P.many,
      map(String.fromList),
    )(P.notOneOf([']', '\n'])),
    P.char(']'),
  ),
)

// wikiLink :: P.Parse ContentPart
// wikiLink = pipe(
// )

image :: P.Parser ContentPart
export image = pipe(
  mapL(Image),
  ap(
    $,
    between(
      P.char('['),
      pipe(
        P.many,
        map(String.fromList),
      )(P.notOneOf([']', '\n'])),
      P.char(']'),
    ),
  ),
  ap(
    $,
    between(
      P.char('('),
      pipe(
        P.many,
        map(String.fromList),
      )(linkCharacter),
      P.char(')'),
    ),
  ),
)(P.char('!'))

textTerminals :: P.Parser String
export textTerminals = P.choice([
  map(always(""), bold),
  map(always(""), italic),
  map(always(""), inlineCode),
  map(always(""), image),
  map(always(""), link),
  map(always(""), P.eof),
  P.string("\n"),
])

text :: P.Parser ContentPart
export text = pipe(
  P.someTill($, P.lookAhead(textTerminals)),
  map(
    pipe(
      String.fromList,
      Text,
    ),
  ),
)(P.notChar('\n'))

lineReturn :: P.Parser ContentPart
export lineReturn = map(always(LineReturn), P.char('\n'))

content :: P.Parser Content
export content = pipe(
  P.choice,
  P.many,
)([bold, italic, inlineCode, image, link, text])

lineReturnExceptBefore :: P.Parser a -> P.Parser ContentPart
export lineReturnExceptBefore = (before) => pipe(
  mapL(identity),
  ap($, alt(map(always(Just({})), before), pure(Nothing))),
  P.lookAhead,
  chain(
    where {
      Just(_) =>
        aempty

      Nothing =>
        lineReturn
    },
  ),
)(lineReturn)

contentWithLineReturn :: P.Parser a -> P.Parser Content
export contentWithLineReturn = (delimiter) => pipe(
  P.choice,
  P.some,
  map(dropWhile(equals(LineReturn))),
)([bold, italic, inlineCode, image, link, text, lineReturnExceptBefore(delimiter)])

heading :: (Content -> Block) -> String -> P.Parser Block
export heading = (constructor) => pipe(
  P.symbol,
  mapL(constructor),
  ap($, content),
  apL($, singleReturnTerminal),
)

singleReturnTerminal :: P.Parser String
export singleReturnTerminal = alt(P.string("\n"), map(always(""), P.eof))

doubleReturnTerminal :: P.Parser String
export doubleReturnTerminal = P.choice([
  P.string("\n\n"),
  map(always(""), P.eof),
  pipe(
    ap(pure((_, _) => "")),
    ap($, P.eof),
  )(P.char('\n')),
])

code :: P.Parser Block
export code = pipe(
  mapL((lang, c) => Code(lang, c)),
  ap($, alt(map(String.fromList, P.letters), pure(""))),
  apL($, P.char('\n')),
  ap($, map(String.fromList, P.manyTill(P.anyChar, P.lookAhead(P.string("\n```"))))),
  apL($, P.choice([map((_) => "", apL(P.string("\n```"), P.eof)), P.string("\n```\n")])),
)(P.string("```"))

blockquote :: P.Parser Block
export blockquote = pipe(
  mapL(Blockquote),
  ap($, contentWithLineReturn(P.choice([P.string("\n"), P.string("```"), P.string(">")]))),
  apL(
    $,
    P.choice([doubleReturnTerminal, P.lookAhead(P.string("\n```")), P.lookAhead(P.string("\n>"))]),
  ),
)(alt(P.symbol(">"), P.string(">")))


export listItemStart = map(
  always(""),
  apL(P.many(P.char(' ')), apL(P.oneOf(['*', '-', '+']), P.some(P.char(' ')))),
)

unorderedListItem :: P.Parser Content
export unorderedListItem = pipe(
  chain(always(apL(content, singleReturnTerminal))),
)(listItemStart)

unorderedList :: P.Parser Block
export unorderedList = pipe(
  P.some,
  map(UnorderedList),
)(unorderedListItem)


paragraph :: P.Parser Block
export paragraph = pipe(
  map(Paragraph),
  apL(
    $,
    P.choice([
      doubleReturnTerminal,
      P.lookAhead(P.string("\n```")),
      P.lookAhead(P.string("\n>")),
      P.lookAhead(apL(P.string("\n"), listItemStart)),
    ]),
  ),
)(contentWithLineReturn(P.choice([listItemStart, P.string("\n"), P.string("```"), P.string(">")])))

block :: P.Parser Block
export block = P.choice([
  heading(H6, "######"),
  heading(H5, "#####"),
  heading(H4, "####"),
  heading(H3, "###"),
  heading(H2, "##"),
  heading(H1, "#"),
  unorderedList,
  blockquote,
  code,
  paragraph,
])

markdownParser :: P.Parser Markdown
export markdownParser = pipe(
  P.choice,
  P.many,
  map(mapMaybe((x) => x)),
)([map(always(Nothing), P.spaces), map(Just, block)])

parseMarkdown :: String -> Either String Markdown
export parseMarkdown = pipe(
  P.runParser(markdownParser),
  mapLeft(always("Malformed markdown input")),
)
